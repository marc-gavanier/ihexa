---
name: Feature branch

on:
  push:
    branches:
      - 'build/*'
      - 'chore/*'
      - 'ci/*'
      - 'dependabot/*'
      - 'docs/*'
      - 'feat/*'
      - 'fix/*'
      - 'perf/*'
      - 'refactor/*'
      - 'revert/*'
      - 'style/*'
      - 'test/*'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  code-check:
    name: Code check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest
      - name: Set up Node.js
        uses: actions/setup-node@v5
        with:
          node-version: latest
          cache: 'pnpm'
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Lint code
        run: pnpm lint:code:ci --reporter=github

  commit-check:
    name: Commit check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest
      - name: Set up Node.js
        uses: actions/setup-node@v5
        with:
          node-version: latest
          cache: 'pnpm'
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Lint commit
        run: pnpm lint:commit

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest
      - name: Set up Node.js
        uses: actions/setup-node@v5
        with:
          node-version: latest
          cache: 'pnpm'
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Run tests
        run: pnpm test

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest
      - name: Set up Node.js
        uses: actions/setup-node@v5
        with:
          node-version: latest
          cache: 'pnpm'
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Build cache
        uses: actions/cache@v4
        with:
          path: .next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          restore-keys: ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-
      - name: Build
        run: pnpm build
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: next-build
          include-hidden-files: true
          path: .next

  e2e:
    name: E2E
    needs: build
    timeout-minutes: 60
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/playwright:v1.55.1
    env:
        HOME: /root
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
      - name: Download build artifact
        uses: actions/download-artifact@v5
        with:
          name: next-build
          path: .next
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest
      - name: Set up Node.js
        uses: actions/setup-node@v5
        with:
          node-version: latest
          cache: 'pnpm'
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Start server
        run: pnpm start &
      - name: Run E2E tests
        run: pnpm exec playwright test
      - uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  cucumber:
    name: Cucumber scenarios
    needs: build
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
      - name: Download build artifact
        uses: actions/download-artifact@v5
        with:
          name: next-build
          path: .next
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest
      - name: Set up Node.js
        uses: actions/setup-node@v5
        with:
          node-version: latest
          cache: 'pnpm'
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Start server
        run: pnpm start &
      - name: Run cucumber
        run: pnpm test:cucumber

  ephemeral-env-name:
    name: Ephemeral environment name
    runs-on: ubuntu-latest
    outputs:
      env-name: ${{ steps.export.outputs.env-name }}
    steps:
      - name: Format environment name
        id: export
        run: |
          ENV_NAME=$(echo "${{ github.ref_name }}" | tr '/' '-')
          echo "env-name=$ENV_NAME" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy to ephemeral environment
    needs:
      - ephemeral-env-name
    runs-on: ubuntu-latest
    environment:
      name: ${{ needs.ephemeral-env-name.outputs.env-name }}
      url: ${{ steps.deploy.outputs.cloudfront_url }}
    steps:
      - name: Show environment name
        run: |
          echo "Environment name: ${{ needs.ephemeral-env-name.outputs.env-name }}"
      - name: Checkout repository
        uses: actions/checkout@v5
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest
      - name: Set up Node.js
        uses: actions/setup-node@v5
        with:
          node-version: latest
          cache: 'pnpm'
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Build and Deploy
        id: deploy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.EPHEMERAL_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.EPHEMERAL_AWS_SECRET_ACCESS_KEY }}
        run: |
          STAGE_NAME="${{ needs.ephemeral-env-name.outputs.env-name }}"
          echo "Deploying stage: $STAGE_NAME"
          DEPLOY_OUTPUT=$(pnpm sst deploy --stage "$STAGE_NAME")
          CLOUDFRONT_URL=$(echo "$DEPLOY_OUTPUT" | grep -Eo 'https://[a-zA-Z0-9.-]+\.cloudfront\.net' | head -n 1)
          echo "cloudfront_url=$CLOUDFRONT_URL" >> $GITHUB_OUTPUT
      - name: Show deployment URL
        run: |
          echo "Deployment URL: ${{ steps.deploy.outputs.cloudfront_url }}"
